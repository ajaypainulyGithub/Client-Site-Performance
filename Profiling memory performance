 ---
title: Fix Memory Problems
description: DevTools to find memory issues that affect page performance
created:  2017 Nov 10
modified: 
 
 
 
 **DevTools to find memory issues that affect page performance**

    Memory issues are important because they are often perceivable by users. Users can perceive memory issues in the following ways:

*************************************A page's performance gets progressively worse over time********************************************
This is possibly a symptom of a memory leak.
A memory leak is when a bug in the page causes the page to progressively use more and more memory over time.

*****************************************A page's performance is consistently bad********************************************************
This is possibly a symptom of memory bloat.
Memory bloat is when a page uses more memory than is necessary for optimal page speed.
A page's performance is delayed or appears to pause frequently. This is possibly a symptom of frequent garbage collections. 
Garbage collection is when the browser reclaims memory.
The browser decides when this happens. During collections, all script execution is paused. So if the browser is garbage collecting a lot, 
script execution is going to get paused a lot.

**************************************Page's performance is delayed or appears to pause frequently***************************************
 This is possibly a symptom of frequent garbage collections.
 Garbage collection is when the browser reclaims memory. 
 The browser decides when this happens. During collections, all script execution is paused. 
 So if the browser is garbage collecting a lot, script execution is going to get paused a lot.
 

>>>>>>>>>>>>>>>>Monitor memory use in realtime with the Chrome Task Manager<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

Use the Chrome Task Manager as a starting point to your memory issue investigation. 
The Task Manager is a realtime monitor that tells you how much memory a page is currently using.

Press Shift+Esc or go to the Chrome main menu and select More tools > Task manager to open the Task Manager.

![alt tag](https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/task-manager.png)
![alt tag](https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/js-memory.png)

These two columns tell you different things about how your page is using memory:

The Memory column : -
Represents native memory. DOM nodes are stored in native memory. If this value is increasing, DOM nodes are getting created.
The JavaScript Memory column represents the JS heap. This column contains two values.
The value you're interested in is the live number (the number in parentheses). 
The live number represents how much memory the reachable objects on your page are using. 
If this number is increasing, either new objects are being created, or the existing objects are growing.

.Visualize memory leaks with Timeline recordings
You can also use the Timeline panel as another starting point in your investigation. 
The Timeline panel helps you visualize a page's memory use over time.
Open the Timeline panel on DevTools.
Enable the Memory checkbox.
Tip: It's a good practice to start and end your recording with a forced garbage collection. 
Click the collect garbage button (force garbage collection button) while recording to force garbage collection.

https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/simple-growth.png
 https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/simple-growth.png
 
 an explanation of the user interface. 
 The HEAP graph in the Overview pane (below NET) represents the JS heap.
 Below the Overview pane is the Counter pane. Here you can see memory usage broken down by JS heap 
 (same as HEAP graph in the Overview pane), documents, DOM nodes, 
 listeners, and GPU memory. Disabling a checkbox hides it from the graph.

Discover detached DOM tree memory leaks with Heap Snapshots
A DOM node can only be garbage collected when there are no references to it from either the page's DOM tree or JavaScript code.
A node is said to be "detached" when it's removed from the DOM tree but some JavaScript still references it. 
Detached DOM nodes are a common cause of memory leaks.
This section teaches you how to use DevTools' heap profilers to identify detached nodes.

To create a snapshot, open DevTools and go to the Profiles panel, select the Take Heap Snapshot radio button, 
and then press the Take Snapshot button.

https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/take-heap-snapshot.png
Type Detached in the Class filter textbox to search for detached DOM trees.

https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/detached-filter.png

Type Detached in the Class filter textbox to search for detached DOM trees.

https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/expanded-detached.png

mmit? Catch up with our playlist on YouTube. Watch now.
Overview
Debug Progressive Web Apps
Understand Security Issues
Run Snippets of Code From Any Page
Keyboard Shortcuts Reference
UI Reference
Inspect and Edit Pages
View and Change CSS
Inspect and Manage Storage, Caches, and Resources
Simulate Mobile Devices with Device Mode
Remote Debugging Android Devices
Inspect and Debug JavaScript
Using the Console
Analyze Runtime Performance
Measure Network Performance
Fix Memory Problems
Overview
Understand Memory Terminology
Record Heap Snapshots
Use the Allocation Profiler
Extend the Chrome DevTools
Contents
Overview
Memory bloat: how much is "too much"?
Monitor memory use in realtime with the Chrome Task Manager
Visualize memory leaks with Timeline recordings
Discover detached DOM tree memory leaks with Heap Snapshots
Identify JS heap memory leaks with Allocation Timelines
Investigate memory allocation by function
Spot frequent garbage collections
Fix Memory Problems

Kayce Basques
By Kayce Basques
Technical Writer at Google
Learn how to use Chrome and DevTools to find memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections.

TL;DR

Find out how much memory your page is currently using with the Chrome Task Manager.
Visualize memory usage over time with Timeline recordings.
Identify detached DOM trees (a common cause of memory leaks) with Heap Snapshots.
Find out when new memory is being allocated in your JS heap with Allocation Timeline recordings.
Overview

In the spirit of the RAIL performance model, the focus of your performance efforts should be your users.

Memory issues are important because they are often perceivable by users. Users can perceive memory issues in the following ways:

A page's performance gets progressively worse over time. This is possibly a symptom of a memory leak. A memory leak is when a bug in the page causes the page to progressively use more and more memory over time.
A page's performance is consistently bad. This is possibly a symptom of memory bloat. Memory bloat is when a page uses more memory than is necessary for optimal page speed.
A page's performance is delayed or appears to pause frequently. This is possibly a symptom of frequent garbage collections. Garbage collection is when the browser reclaims memory. The browser decides when this happens. During collections, all script execution is paused. So if the browser is garbage collecting a lot, script execution is going to get paused a lot.
Memory bloat: how much is "too much"?

A memory leak is easy to define. If a site is progressively using more and more memory, then you've got a leak. But memory bloat is a bit harder to pin down. What qualifies as "using too much memory"?

There are no hard numbers here, because different devices and browsers have different capabilities. The same page that runs smoothly on a high-end smartphone might crash on a low-end smartphone.

The key here is to use the RAIL model and focus on your users. Find out what devices are popular with your users, and then test out your page on those devices. If the experience is consistently bad, the page may be exceeding the memory capabilities of those devices.

Monitor memory use in realtime with the Chrome Task Manager

Use the Chrome Task Manager as a starting point to your memory issue investigation. The Task Manager is a realtime monitor that tells you how much memory a page is currently using.

Press Shift+Esc or go to the Chrome main menu and select More tools > Task manager to open the Task Manager.
opening the task
   manager

Right-click on the table header of the Task Manager and enable JavaScript memory.
enable javascript
   memory

These two columns tell you different things about how your page is using memory:

The Memory column represents native memory. DOM nodes are stored in native memory. If this value is increasing, DOM nodes are getting created.
The JavaScript Memory column represents the JS heap. This column contains two values. The value you're interested in is the live number (the number in parentheses). The live number represents how much memory the reachable objects on your page are using. If this number is increasing, either new objects are being created, or the existing objects are growing.
Visualize memory leaks with Timeline recordings

You can also use the Timeline panel as another starting point in your investigation. The Timeline panel helps you visualize a page's memory use over time.

Open the Timeline panel on DevTools.
Enable the Memory checkbox.
Make a recording.
Tip: It's a good practice to start and end your recording with a forced garbage collection. Click the collect garbage button (force garbage collection button) while recording to force garbage collection.

To demonstrate Timeline memory recordings, consider the code below:

var x = [];

function grow() {
  for (var i = 0; i < 10000; i++) {
    document.body.appendChild(document.createElement('div'));
  }
  x.push(new Array(1000000).join('x'));
}

document.getElementById('grow').addEventListener('click', grow);
Every time that the button referenced in the code is pressed, ten thousand div nodes are appended to the document body, and a string of one million x characters is pushed onto the x array. Running this code produces a Timeline recording like the following screenshot:

simple growth example

First, an explanation of the user interface. The HEAP graph in the Overview pane (below NET) represents the JS heap. Below the Overview pane is the Counter pane. Here you can see memory usage broken down by JS heap (same as HEAP graph in the Overview pane), documents, DOM nodes, listeners, and GPU memory. Disabling a checkbox hides it from the graph.

Now, an analysis of the code compared with the screenshot. If you look at the node counter (the green graph) you can see that it matches up cleanly with the code. The node count increases in discrete steps. You can presume that each increase in the node count is a call to grow(). The JS heap graph (the blue graph) is not as straightforward. In keeping with best practices, the first dip is actually a forced garbage collection (achieved by pressing the collect garbage button). As the recording progresses you can see that the JS heap size spikes. This is natural and expected: the JavaScript code is creating the DOM nodes on every button click and doing a lot of work when it creates the string of one million characters. The key thing here is the fact that the JS heap ends higher than it began (the "beginning" here being the point after the forced garbage collection). In the real world, if you saw this pattern of increasing JS heap size or node size, it would potentially mean a memory leak.

Discover detached DOM tree memory leaks with Heap Snapshots

A DOM node can only be garbage collected when there are no references to it from either the page's DOM tree or JavaScript code. A node is said to be "detached" when it's removed from the DOM tree but some JavaScript still references it. Detached DOM nodes are a common cause of memory leaks. This section teaches you how to use DevTools' heap profilers to identify detached nodes.

Here's a simple example of detached DOM nodes.

var detachedNodes;

function create() {
  var ul = document.createElement('ul');
  for (var i = 0; i < 10; i++) {
    var li = document.createElement('li');
    ul.appendChild(li);
  }
  detachedNodes = ul;
}

document.getElementById('create').addEventListener('click', create);
Clicking the button referenced in the code creates a ul node with ten li children. These nodes are referenced by the code but do not exist in the DOM tree, so they're detached.

Heap snapshots are one way to identify detached nodes. As the name implies, heap snapshots show you how memory is distributed among your page's JS objects and DOM nodes at the point of time of the snapshot.

To create a snapshot, open DevTools and go to the Profiles panel, select the Take Heap Snapshot radio button, and then press the Take Snapshot button.

take heap snapshot

The snapshot may take some time to process and load. Once it's finished, select it from the lefthand panel (named HEAP SNAPSHOTS).

Type Detached in the Class filter textbox to search for detached DOM trees.

filtering for detached nodes

Expand the carats to investigate a detached tree.

investigating detached tree

Nodes highlighted yellow have direct references to them from the JavaScript code.
Nodes highlighted red do not have direct references.
They are only alive because they are part of the yellow node's tree.
In general, you want to focus on the yellow nodes. 
Fix your code so that the yellow node isn't alive for longer than it needs to be, 
and you also get rid of the red nodes that are part of the yellow node's tree.

https://developers.google.com/web/tools/chrome-devtools/memory-problems/imgs/yellow-node.png

 
